# Delete rows we don't need
data_norm <- data_norm[,-1]
# Split into test/training
rows <- dim(data_norm)[1]
sampling.rate <- 0.8
# Test/training
training <- sample(1:rows, sampling.rate * rows, replace=FALSE)
testing <- setdiff(1:rows, training)
train <- subset(data_norm[training, ]) ; table(train$diagnosis)
test <- subset(data_norm[testing, ]) ; table(test$diagnosis)
require(class)
df.misclas <- data.frame(cbind(1:30, unlist(Knn.Misclass)))
knn.pred <- knn(train[,-1], test[,-1], train[,1], k=3)
table(knn.pred, test[,1])
# Proportions
prop.table(table(knn.pred, test[,1]))
test[,1] != knn.pred
knn.pred == test[,1]
df.sum <- data.frame(cbind(knn.pred,test[,1],knn.pred == test[,1]))
View(df.sum)
rm(list=ls())
direct <- "/users/jasper/documents/programmig/doing.data.science/"
direct <- "/users/jasper/documents/programming/doing.data.science/"
list.files(direct)
direct <- "/users/jasper/documents/programming/doing.data.science/chapter4"
list.files(direct)
direct <- "/users/jasper/documents/programming/doing.data.science/chapter4/enron"
list.files(direct)
direct <- "/users/jasper/documents/programming/doing.data.science/chapter4/enron1"
list.files(direct)
direct <- "/users/jasper/documents/programming/doing.data.science/chapter4/enron1/"
list.files(direct)
list.files(direct)
direct <- "/users/jasper/documents/programming/doing.data.science/chapter4/enron1/"
direct <- "/users/jasper/documents/programming/doing.data.science/chapter4/"
list.files(direct)
data <- paste0(direct, "sentant.csv", header=T, sep=",", stringsAsFactors=F)
data <- paste0(direct, "sentant.csv"), header=T, sep=",", stringsAsFactors=F))
data <- read.csv(paste0(direct, "sentant.csv"), header=T, sep=",", stringsAsFactors=F))
data <- read.csv(paste0(direct, "sentant.csv"), header=T, sep=",", stringsAsFactors=F)
data <- read.csv(paste0(direct, "sental.csv"), header=T, sep=",", stringsAsFactors=F)
data <- read.csv(paste0(direct, "sental.csv"), header=T, stringsAsFactors=F)
data <- read.csv(paste0(direct, "sental.csv"),
header=T,
stringsAsFactors=F,
quote="",
row.names=NULL)
View(data)
data <- read.csv2(paste0(direct, "sental.csv"))
data <- read.csv(paste0(direct, "tet.csv"))
header=T,
stringsAsFactors=F)
stringsAsFactors=F)
data <- read.csv(paste0(direct, "tet.csv")
header=T,
data <- read.csv(paste0(direct, "tet.csv"),
header=T,
stringsAsFactors=F)
View(data)
data <- read.csv(paste0(direct, "tet.csv"),
header=F,
stringsAsFactors=F)
View(data)
View(data)
data <- read.csv(paste0(direct, "twit.csv"),
header=T,
stringsAsFactors=F)
head(data)
View(data)
View(data)
names(data)
names(data) <- c("sentiment", "id", "DTstamp","type1", "username", "tweet")
str(data)
data$type1 <- as.factor(data$type1)
print(sum(data[which(data$sentiment==1),]))
data$sentiment <- as.factor(data$sentiment)
str(data)
View(data)
require(plyr)
require(dplyr)
freq(data$sentiment)
require(data.table)
freq(data$sentiment)
prop.table(data$sentiment)
table(data$Sentiment)
table(data$sentiment)
data <- read.table(paste0(direct, "testdata.txt"))
data <- read.table(paste0(direct, "testdata.txt"))
table(data$sentiment)
data <- read.csv(paste0(direct, "twit.csv"),
header=T,
stringsAsFactors=F)
save(data, "sentiment.Rdata")
save("sentiment.Rdata", data)
save(data, file="Sentiment.Rdata")
names(data) <- c("sentiment", "id", "DTstamp","type1", "username", "tweet")
str(data)
data$type1 <- as.factor(data$type1)
data$sentiment <- as.factor(data$sentiment)
str(data)
table(data$sentiment)
require(plyr)
require(dplyr)
s.data <- sample(1:nrow(data), n.sample, replace = FALSE )
n.sample = 50000
s.data <- sample(1:nrow(data), n.sample, replace = FALSE )
s.data <- data[s.data, ]
View(s.data)
hate <- s.data[grepl("hate", s.data$tweet),]
View(hate)
hate <- s.data[grep("hate", s.data$tweet),]
hate <- dim(s.data[grepl("hate", s.data$tweet),])[1]
hate <- (s.data[grepl("hate", s.data$tweet),])
View(hate)
neg <- hate[which(sentiment=0),]
neg <- hate[which(sentiment==0),]
neg <- hate[which(hate$sentiment==0),]
pos <- hate[which(hate$sentiment==1),]
pos <- hate[which(hate$sentiment==4),]
hate <- (s.data[grepl("hate", s.data$tweet),])
neg <- dim(hate[which(hate$sentiment==0),])[1]
pos <- dim(hate[which(hate$sentiment==4),])[1]
n.neg <- dim(s.data[which(s.data$sentiment == 0),])[1]
n.pos <- dim(s.data[which(s.data$sentiment == 4),])[1]
h.neg <- dim(hate[which(hate$sentiment==0),])[1]
# Labeled as positive?
h.pos <- dim(hate[which(hate$sentiment==4),])[1]
rm(neg, pos)
p.neg <- t_number_neg / (t_number_pos + t_number_neg)
Nbayes <- function(t_number_neg, t_number_pos, w_number_neg, w_number_pos) {
# Probability of negative
p.neg <- t_number_neg / (t_number_pos + t_number_neg)
# Probability of positive
p.pos <- 1-p.neg
# Probability of word given negative
p.word.neg <- h.neg / t_number_neg
# Porbability of word given positive
p.word.pos <- h.pos / t_number_pos
# Naive bayes probability calculating the probability that a tweet is negative given that it
# contains the word of interest.
NB <- (p.word.neg * p.neg) / (p.word.neg * p.neg + p.word.pos * p.pos)
return(NB)
}
Nbayes <- function(t_number_neg, t_number_pos, w_number_neg, w_number_pos) {
# Probability of negative
p.neg <- t_number_neg / (t_number_pos + t_number_neg)
# Probability of positive
p.pos <- 1-p.neg
# Probability of word given negative
p.word.neg <- h.neg / t_number_neg
# Porbability of word given positive
p.word.pos <- h.pos / t_number_pos
# Naive bayes probability calculating the probability that a tweet is negative given that it
# contains the word of interest.
NB <- (p.word.neg * p.neg) / (p.word.neg * p.neg + p.word.pos * p.pos)
return(NB * 100)
}
Nbayes <- function(t_number_neg, t_number_pos, w_number_neg, w_number_pos) {
# Probability of negative
p.neg <- t_number_neg / (t_number_pos + t_number_neg)
# Probability of positive
p.pos <- 1-p.neg
# Probability of word given negative
p.word.neg <- w_number_neg / t_number_neg
# Porbability of word given positive
p.word.pos <- w_number_pos / t_number_pos
# Naive bayes probability calculating the probability that a tweet is negative given that it
# contains the word of interest.
NB <- (p.word.neg * p.neg) / (p.word.neg * p.neg + p.word.pos * p.pos)
return(NB * 100)
}
Nbayes(n.neg, n.pos, h.neg, h.pos)
# Calculate probabilities. Create function
Nbayes <- function(t_number_neg, t_number_pos, w_number_neg, w_number_pos) {
# Probability of negative
p.neg <- t_number_neg / (t_number_pos + t_number_neg)
# Probability of positive
p.pos <- 1-p.neg
# Probability of word given negative
p.word.neg <- w_number_neg / t_number_neg
# Porbability of word given positive
p.word.pos <- w_number_pos / t_number_pos
# Naive bayes probability calculating the probability that a tweet is negative given that it
# contains the word of interest.
NB <- (p.word.neg * p.neg) / (p.word.neg * p.neg + p.word.pos * p.pos)
return(NB)
}
Nbayes(n.neg, n.pos, h.neg, h.pos)
1- Nbayes(n.neg, n.pos, h.neg, h.pos)
NB.main(s.data, "love")
# Main function. Returns NB probability
NB.main <- function(dataset, word) {
# How many positive and negative observations do we have?
n.neg <- dim(dataset[which(dataset$sentiment == 0),])[1]
n.pos <- dim(dataset[which(dataset$sentiment == 4),])[1]
# Take all obs with the word of interest in it
word.data <- (dataset[grepl(word, dataset$tweet),])
# labeled as negative?
ww.neg <- dim(word.data[which(word.data$sentiment==0),])[1]
# Labeled as positive?
ww.pos <- dim(word.data[which(word.data$sentiment==4),])[1]
# Get probability from function
return(Nbayes(n.neg, n.pos, ww.neg, ww.pos))
}
NB.main(s.data, "love")
NB.main(s.data, "suck")
suppressWarnings(NB.main(s.data, "suck"))
# Main function. Returns NB probability
NB.main <- function(dataset, word) {
# How many positive and negative observations do we have?
n.neg <- dim(dataset[which(dataset$sentiment == 0),])[1]
n.pos <- dim(dataset[which(dataset$sentiment == 4),])[1]
# Take all obs with the word of interest in it
word.data <- (dataset[grepl(word, dataset$tweet),])
# labeled as negative?
ww.neg <- dim(word.data[which(word.data$sentiment==0),])[1]
# Labeled as positive?
ww.pos <- dim(word.data[which(word.data$sentiment==4),])[1]
# Get probability from function
return(suppressWarnings(Nbayes(n.neg, n.pos, ww.neg, ww.pos)))
}
NB.main(s.data, "suck")
NB.main(s.data, "dick")
p.neg <- NB.main(s.data, "dick")
1 - p.neg
p.pos <- 1 - p.neg
p.neg <- NB.main(s.data, "sleep")
p.pos <- 1 - p.neg
p.neg <- NB.main(s.data, "ass")
p.pos <- 1 - p.neg
p.neg <- NB.main(s.data, "death")
p.pos <- 1 - p.neg
p.neg <- NB.main(s.data, "dead")
p.pos <- 1 - p.neg
p.neg <- NB.main(s.data, "terror")
p.pos <- 1 - p.neg
p.neg <- NB.main(s.data, "viagra")
p.neg <- NB.main(s.data, "tennis")
p.pos <- 1 - p.neg
p.neg <- NB.main(s.data, "happy")
p.pos <- 1 - p.neg
p.neg <- NB.main(s.data, "rape")
p.pos <- 1 - p.neg
p.neg <- NB.main(s.data, "rape")
log(p.neg)
log(p.neg * 100)
p.neg <- NB.main(data, "rape")
p.pos <- 1 - p.neg
p.neg <- NB.main(data, "happy")
p.pos <- 1 - p.neg
p.neg <- NB.main(data, "sad")
p.pos <- 1 - p.neg
p.neg <- NB.main(data, "hate")
p.pos <- 1 - p.neg
p.neg <- NB.main(data, "cry")
p.pos <- 1 - p.neg
data$tweet <- tolower(data$tweet)
words <- c("hate","love","suck","happy","terror","generous","stupid","fun")
words <- c("hate","love","suck","happy","terror","generous","stupid","fun")
sent <- "I am a sentence"
"am" in sent
"am" %in% sent
" am " %in% sent
"sentence" %in% sent
grep("am", sent)
grepl("am", sent)
grep("am", sent)
grep("boo", sent)
wordocc <- function(word, dataset) {
ifelse(grep(word, dataset$tweet), 1, 0)
}
s.data$newvec <- wordocc("hate", s.data)
s.data$newvec <- apply(dataset$tweet, wordocc("hate",dataset$tweet))
s.data$newvec <- apply(dataset$tweet, wordocc("hate"))
s.data$newvec <- lapply(dataset$tweet, wordocc("hate"))
s.data$newvec <- lapply(dataset$tweet, function(x) {
ifelse(grep("hate",x), 1, 0)
})
s.data$newvec <- lapply(s.data$tweet, function(x) {
ifelse(grep("hate",x), 1, 0)
})
View(s.data)
s.data$newvec <- lapply(s.data$tweet, function(x) {
unlist(ifelse(grep("hate",x), "yes", "no"))
})
View(s.data)
s.data$newvec <- lapply(s.data$tweet, function(x) {
unlist(ifelse(grepl("hate",x), "yes", "no"))
})
View(s.data)
s.data$newvec <- lapply(s.data$tweet, function(x) {
unlist(ifelse(grepl("hate",x), 1, 0))
})
View(s.data)
ifelse(grepl("hate",s.data$newvec), 1, 0)
new.df <- data[,c("tweet","sentiment")]
View(new.df)
for (i in words) {
eval(parse(text=paste('new.df$', i, sep=""))) <- ifelse(grepl(word, new.df$tweet), 1, 0)
}
new.df <- data[,c("tweet","sentiment")]
for (i in words) {
eval(parse(text=paste('new.df$', i, sep=""))) <- ifelse(grepl(i, new.df$tweet), 1, 0)
}
View(new.df)
eval(parse(text=paste('new.df$', i, sep="")))
eval(parse(text=paste('new.df$', "hate", sep="")))
parse(text=paste('new.df$', "hate", sep=""))
for (i in words) {
parse(text=paste('new.df$', i, sep="")) <- ifelse(grepl(i, new.df$tweet), 1, 0)
}
new.df <- cbind(new.df, ifelse(grepl(i, new.df$tweet), 1, 0))
}
for (i in words) {
new.df <- cbind(new.df, ifelse(grepl(i, new.df$tweet), 1, 0))
}
View(new.df)
names(new.df) <- c("tweet","sentiment",words)
str(new.df)
words <- c("hate","love","suck","happy","terror","generous","stupid","fun")
# New dataframe
new.df <- data[,c("tweet","sentiment")]
# For each word, eval
for (i in words) {
new.df <- cbind(new.df, as.factor(ifelse(grepl(i, new.df$tweet), 1, 0)))
}
View(new.df)
names(new.df) <- c("tweet","sentiment",words)
View(new.df)
str(new.df)
samp <- sample(1:nrow(new.df), 5000, replace=F)
df.new <- new.df[samp,]
View(df.new)
new.df <- data[,c("tweet","sentiment")]
new.df$tweet <- tolower(new.df$tweet)
require(stringr)
new.df$tweet <- tolower(str_trim(new.df$tweet))
new.df$tweet <- tolower(str_trim(iconv(new.df$tweet,"WINDOWS-1252","UTF-8")))
View(new.df)
words <- c("hate","love","suck","happy","terror","generous","stupid","fun","cry")
for (i in words) {
new.df <- cbind(new.df, as.factor(ifelse(grepl(i, new.df$tweet), 1, 0)))
}
for (i in words) {
new.df <- cbind(new.df, ifelse(grepl(i, new.df$tweet), 1, 0))
}
View(new.df)
names(new.df) <- c("tweet","sentiment",words)
str(new.df)
new.df <- data[,c("tweet","sentiment")]
words <- c("hate","love","suck","happy","terror","generous","stupid","fun","cry")
for (i in words) {
new.df <- cbind(new.df, ifelse(grepl(i, new.df$tweet), 1, 0))
}
View(new.df)
names(new.df) <- c("tweet","sentiment",words)
str(new.df)
samp <- sample(1:nrow(new.df), 5000, replace=F)
df.new <- new.df[samp,]
View(df.new)
Pos.Tweet <- df.new[which(df.new$sentiment==4),]
Pos.Tweet <- dim(df.new[which(df.new$sentiment==4),])[1]
Neg.Tweet <- dim(df.new[which(df.new$sentiment==0),])[1]
num.obs <- dim(df.new)[1]
Pos.Tweet <- dim(df.new[which(df.new$sentiment==4),])[1] / num.obs
Neg.Tweet <- dim(df.new[which(df.new$sentiment==0),])[1] / num.obs
wordprobs <- lapply(df.new[,3:11], function(x){
dim(x[which(x == 1)])[1] / num.obs
})
dim(x[which(x == 1)],)[1] / num.obs
wordprobs <- lapply(df.new[,3:11], function(x){
dim(x[which(x == 1)],)[1] / num.obs
})
wordprobs <- lapply(df.new[,3:11], function(x){
nrow(x[which(x == 1)]) / num.obs
})
wordprobs <- lapply(df.new[,3:11], function(x){
nrow(x[which(x == 1)])
})
require(dplyr)
wordprobs <- lapply(df.new[,3:11], function(x){
print(x)
})
wordprobs <- lapply(df.new[,3:11], function(x){
sum(which(x == 1))
})
wordprobs <- lapply(df.new[,3:11], function(x){
sum(which(x == 1))
})
wordprobs <- lapply(df.new[,3:11], function(x){
print(x)
})
wordprobs <- lapply(df.new[,3:11], function(x){
print(which(x==1))
})
View(df.new)
wordprobs <- lapply(df.new[,3:11], function(x){
sum(x)
})
wordprobs <- lapply(df.new[,3:11], function(x){
sum(x) / num.obs
})
wordprobs <- lapply(df.new[,3:11], function(x){
unlist(sum(x) / num.obs)
})
unlist(wordprobs)
len(c(1,2,3,4))
length(c(1,2,3,4))
pos.wordprobs <- lapply(df.new[which(sentiment==4),3:11], function(x){
sum(x) / length(x)
})
pos.wordprobs <- lapply(df.new[which(df.new$sentiment==4),3:11], function(x){
sum(x) / length(x)
})
neg.wordprobs <- lapply(df.new[which(df.new$sentiment==0),3:11], function(x){
sum(x) / length(x)
})
df.new <- new.df
num.obs <- dim(df.new)[1]
Pos.Tweet <- dim(df.new[which(df.new$sentiment==4),])[1] / num.obs
Neg.Tweet <- dim(df.new[which(df.new$sentiment==0),])[1] / num.obs
wordprobs <- lapply(df.new[,3:11], function(x){
sum(x) / num.obs
})
pos.wordprobs <- lapply(df.new[which(df.new$sentiment==4),3:11], function(x){
sum(x) / length(x)
})
neg.wordprobs <- lapply(df.new[which(df.new$sentiment==0),3:11], function(x){
sum(x) / length(x)
})
rm(list=ls())
setwd("/Users/Jasper/Documents/github.projects/reclaimnaija/data/")
require(ggplot2) ; require(dplyr) ; require(RSQLite) ; require(lubridate)
db<-dbConnect(SQLite(), dbname=paste("Naija.db",
sep=""))
db<-dbConnect(SQLite(), dbname=paste("NAIJA_sec.db",
sep=""))
data <- dbReadTable(db, "NAIJA_tab")
View(data)
db<-dbConnect(SQLite(), dbname=paste("NAIJA_sec.db",
sep=""))
data <- dbReadTable(db, "NAIJA_tab")
data <- dbSendQuery(db, "SELECT * FROM NAIJA WHERE Date = '2014-08-09'")
data <- dbReadTable(db, "NAIJA_tab")
dbDisconnect(db)
View(data)
write.csv(data, "tester.csv", row.names=F)
db<-dbConnect(SQLite(), dbname=paste("NAIJA_sec.db",
sep=""))
data <- dbReadTable(db, "NAIJA_tab")
dbDisconnect(db)
View(data)
View(data)
dbDisconnect(db)
db<-dbConnect(SQLite(), dbname=paste("NAIJA_sec.db",
sep=""))
data <- dbReadTable(db, "NAIJA_tab")
View(data)
dbDisconnect(db)
db<-dbConnect(SQLite(), dbname=paste("NAIJA_sec.db",
sep=""))
data <- dbReadTable(db, "NAIJA_tab")
dbDisconnect(db)
View(data)
db<-dbConnect(SQLite(), dbname=paste("NAIJA_sec.db",
sep=""))
data <- dbReadTable(db, "NAIJA_tab")
View(data)
dbDisconnect(db)
db<-dbConnect(SQLite(), dbname=paste("NAIJA_sec.db",
sep=""))
data <- dbReadTable(db, "NAIJA_tab")
View(data)
dbDisconnect(db)
db<-dbConnect(SQLite(), dbname=paste("NAIJA_sec.db",
sep=""))
data <- dbReadTable(db, "NAIJA_tab")
View(data)
dbDisconnect(db)
db<-dbConnect(SQLite(), dbname=paste("NAIJA_sec.db",
sep=""))
data <- dbReadTable(db, "NAIJA_tab")
dbDisconnect(db)
db<-dbConnect(SQLite(), dbname=paste("NAIJA_sec.db",
sep=""))
data <- dbReadTable(db, "NAIJA_tab")
View(data)
dbDisconnect(db)
db<-dbConnect(SQLite(), dbname=paste("NAIJA_sec.db",
sep=""))
data <- dbReadTable(db, "NAIJA_tab")
data <- dbReadTable(db, "NAIJA_tab")
data <- dbReadTable(db, "NAIJA_tab")
View(data)
unique(data$URL)
is.unique(data$URL)
ifelse(unique(data$URL), print("YES"), print("NO"))
ifelse(unique(data$URL), "YES", "NO")
ifelse(unique(data$URL), 1, 0)
ifelse(unique(data$URL)), 1, 0
ifelse(unique(data$URL), 1, 0)
unique(data$URL)
!unique(data$URL)
unique(!data$URL)
data <- dbReadTable(db, "NAIJA_tab")
unique(data$URL)
data[!unique(data$URL),]
data[unique(data$URL),]
unique(data)
data <- dbReadTable(db, "NAIJA_tab")
data <- dbReadTable(db, "NAIJA_tab")
dbDisconnect(db)
